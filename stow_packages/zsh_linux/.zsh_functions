# Show contents of dir after action
function cd() {
    builtin cd "$1"
    ls
}

# Markdown link check in a folder, recursive
function mlc() {
    find $1 -name \*.md -exec markdown-link-check -p {} \;
}

function gitBranch() {
    # Displays current branch
    git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

function update_tmux_conf() {
    # Reload .tmux.conf
    tmux source-file ~/.tmux.conf
}

function ssh_fix() {
    eval "$(ssh-agent)"
    ssh-add
}

function ppgrep() {
    # pgrep but with better output, e.g., process name:
    pgrep "$@" | xargs --no-run-if-empty ps fp
}

function user_disk_space() {
    df -h --output=target,used /home/* | sed 1d | sort -k2 -h
}

function get_biggest_folders() {
    local _path="${1:-./}"
    local num_results="${2:-20}"
    du -ah "${_path}" | sort -h -r | head -n "${num_results}"
}

function get_large_files() {
    local _path="${1:-./}"
    local size="${2:-500}"
    echo "Finding files in '${_path}', larger than: ${size}M..."
    find "${_path}" -xdev -type f -size "+${size}M" -exec du -sh {} \;
}

function get_dir_size() {
    local _path="${1:-./}"
    du -h --max-depth=0 "${_path}"
}

function get_file_count() {
    local _path="${1:-./}"
    find "${_path}" -type f | wc -l
}

function sync_dir() {
    # TL;DR; Copy dir (replace files if source!=target )

    # Sync one dir to another, showing progress, resume if possible. This function ensures that the
    # files are synced rather than the folder itself being transferred. The third parameter is
    # optional, it allows you to add additional flags to the rsync command (for example a common one
    # might be '-z' to enable compression).
    local src="${1}"
    local target="${2}"
    local flags="${3:-}"
    # Ensure paths have trailing slashes so we sync folder contents rather than folder itself:
    [[ "${src}" != */ ]] && src="${src}/"
    [[ "${target}" != */ ]] && target="${target}/"
    echo "Synching dir FROM: '${src}', TO: '${target}'..."
    get_dir_size "${src}"
    mkdir -p "${target}"

    #   - -a: The archive mode. It's a shorthand that includes several other options: -rlptgoD. It
    #     makes rsync replicate directories recursively (-r), copy symbolic links as symbolic links
    #     (-l), preserve permissions (-p), preserve modification times (-t), preserve group (-g),
    #     preserve owner (super-user only, -o), and preserve device files (super-user only) and
    #     special files (-D). Essentially, it ensures that the target is a mirror of the source with
    #     many filesystem attributes preserved.
    #   - -u: This option enables the update mode, which means rsync will skip any files that are
    #     newer on the receiver side. It's useful for keeping changes made to files on the target
    #     that haven't been updated in the source, avoiding overwriting newer files with older ones.
    #   - --ignore-existing: This tells rsync to skip updating files that already exist on the
    #     destination. Unlike -u, which skips files based on the modification time,
    #     --ignore-existing will ignore the file entirely if it exists on the target, regardless of
    #     its modification time or content changes.
    #   - -z: Enables compression during the transfer. It compresses the file data as it is sent to
    #     the destination machine, which can reduce the amount of data being transmitted - useful
    #     for slow connections. However, it might add overhead for very fast networks or when
    #     transferring already compressed files.
    #   - --ignore-existing: This tells rsync to skip updating files that already exist on the
    #     destination. Unlike -u, which skips files based on the modification time,
    #     --ignore-existing will ignore the file entirely if it exists on the target, regardless of
    #     its modification time or content changes.
    #   - --delete: This flag is crucial for your requirement to make the target an exact copy of
    #     the source. It tells rsync to delete extraneous files from the target directory—those
    #     files that are not present in the source directory. This ensures that the target directory
    #     only contains files that are present in the source directory.
    rsync -auh --info=progress2 --no-inc-recursive "${src}" "${target}"
}

function mirror_dir() {
    # TL;DR; Force target dir to be an exact copy of source, deleting items from target if they are
    # not in source.

    # Show progress, resume if possible, no compression. This function ensures that the files are
    # synced rather than the folder itself being transferred. The third parameter is optional, it
    # allows you to add additional flags to the rysync command (for example a common one might be
    # '-z' to enable compression).
    #
    #   Add `--delete` to remove files on target that are not on source
    local src="${1}"
    local target="${2}"
    local flags="${3:-}"
    # Ensure paths have trailing slashes so we sync folder contents rather than folder itself:
    [[ "${src}" != */ ]] && src="${src}/"
    [[ "${target}" != */ ]] && target="${target}/"
    echo "Synching dir FROM: '${src}', TO: '${target}'..."
    get_dir_size "${src}"
    mkdir -p "${target}"

    #   - -a: The archive mode. It's a shorthand that includes several other options: -rlptgoD. It
    #     makes rsync replicate directories recursively (-r), copy symbolic links as symbolic links
    #     (-l), preserve permissions (-p), preserve modification times (-t), preserve group (-g),
    #     preserve owner (super-user only, -o), and preserve device files (super-user only) and
    #     special files (-D). Essentially, it ensures that the target is a mirror of the source with
    #     many filesystem attributes preserved.
    #   - -u: This option enables the update mode, which means rsync will skip any files that are
    #     newer on the receiver side. It's useful for keeping changes made to files on the target
    #     that haven't been updated in the source, avoiding overwriting newer files with older ones.
    #   - --ignore-existing: This tells rsync to skip updating files that already exist on the
    #     destination. Unlike -u, which skips files based on the modification time,
    #     --ignore-existing will ignore the file entirely if it exists on the target, regardless of
    #     its modification time or content changes.
    #   - -z: Enables compression during the transfer. It compresses the file data as it is sent to
    #     the destination machine, which can reduce the amount of data being transmitted - useful
    #     for slow connections. However, it might add overhead for very fast networks or when
    #     transferring already compressed files.
    #   - --ignore-existing: This tells rsync to skip updating files that already exist on the
    #     destination. Unlike -u, which skips files based on the modification time,
    #     --ignore-existing will ignore the file entirely if it exists on the target, regardless of
    #     its modification time or content changes.
    #   - --delete: This flag is crucial for your requirement to make the target an exact copy of
    #     the source. It tells rsync to delete extraneous files from the target directory—those
    #     files that are not present in the source directory. This ensures that the target directory
    #     only contains files that are present in the source directory.
    #   - --compress-choice=zstd: Enable zstd compression (faster and better compression than zlib)
    #   - --compress-level=9: Increase the compression level from the default of 3 (tradeoff vs
    #     maximum of 19)
    #   - --checksum-choice=xxh3: Use xxh3 hashing algorithm (very fast)

    rsync -ah --info=progress2 --no-inc-recursive "${flags}" "${src}" "${target}"
}

# ex - archive extractor
# usage: ex <file>
function extract() {
    if [ -f "${1}" ]; then
        case "${1}" in
            *.tar.bz2) tar xjf "${1}" ;;
            *.tar.gz) tar xzf "${1}" ;;
            *.bz2) bunzip2 "${1}" ;;
            *.rar) unrar x "${1}" ;;
            *.gz) gunzip "${1}" ;;
            *.tar) tar xf "${1}" ;;
            *.tbz2) tar xjf "${1}" ;;
            *.tgz) tar xzf "${1}" ;;
            *.zip) unzip "${1}" ;;
            *.Z) uncompress "${1}" ;;
            *.7z) 7z x "${1}" ;;
            *) echo "'${1}' cannot be extracted via extract()" ;;
        esac
    else
        echo "'${1}' is not a valid file"
    fi
}

function tar_multicore() {
    # If 2nd arg is not specified, uses the first arg (folder to compress) + ".tar.gz" as the
    # output filename
    local folder_path="${1}"
    local out_name="${2}"
    if [ -z "$2" ]; then
        # echo "No argument supplied"
        out_name="${folder_path}.tar.gz"
    else
        if [[ $out_name != *.tar.gz ]]; then
            echo "Invalid archive name was specified: ${out_name}"
            return
        fi
    fi

    echo "input folder: ${folder_path}"
    echo "output file : ${out_name}"
    tar --use-compress-program="pigz -k " -cf "${out_name}" "${folder_path}"
}

function optimize_pdf_in_dir() {
    local dir_path="${1:-.}"

    # Resolve to an absolute, normalized path so '.' and trailing slashes behave
    local dir_abs
    dir_abs="$(realpath "$dir_path")" || { echo "Path not found: $dir_path"; return 1; }

    echo "Optimizing pdfs in dir: ${dir_path}"


    # Parent directory + last segment
    local parent last
    parent="$(dirname "$dir_abs")"
    last="$(basename "$dir_abs")"

    # Output path is sibling with `_optimized` suffix
    output_path="${parent}/${last}_optimized"

    # Create a folder at $dir_path with "_optimized" in the name, to store optimized pdfs:
    mkdir -p "${output_path}"
    echo "input_path: ${dir_abs}"
    echo "output path: ${output_path}"
    find "${dir_abs}" -type f -name '*.pdf' -print0 | \
        parallel -0 -j "$(nproc || sysctl -n hw.ncpu)" -- \
            gs -dNOSAFER -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dQUIET \
                -o "${output_path/}/{/}" -f "{}"
    
}

function list_git_repos() {
    find . -maxdepth 10 -type d -exec test -e '{}/.git' ';' -printf "is git repo: %p\n"
}

function clean_notebook() {
    local notebook_path="${1}"
    python -m nbconvert --ClearOutputPreprocessor.enabled=True --inplace "${notebook_path}"
    # python -m nbconvert --ClearOutputPreprocessor.enabled=True --inplace *.ipynb **/*.ipynb
}

function run_notebook() {
    local notebook_path="${1}"
    python3 -m nbconvert --ExecutePreprocessor.timeout=-1 --execute --inplace "${notebook_path}"
}

function clean_git_history_for_notebooks() {
    git filter-branch --tree-filter \
        "python3 -m nbconvert --ClearOutputPreprocessor.enabled=True --inplace *.ipynb **/*.ipynb || true"
}

function map_shared() {
    TARGET_PATH=~/bair_shared
    mkdir -p "${TARGET_PATH}"
    sshfs -o idmap=user gbiamby@cthu5:/shared "${TARGET_PATH}"
}

function map_cthu() {
    TARGET_PATH=~/bair_cthu5
    mkdir -p "${TARGET_PATH}"
    sshfs -o idmap=user gbiamby@cthulhu5:/home/gbiamby/ "${TARGET_PATH}"
}

function json_pretty() {
    local json_path="${1}"
    cat "${json_path}" | jq -r '.' >"pretty_${json_path}"
}

function deactivate_envs() {
    for i in $(seq ${CONDA_SHLVL}); do
        conda deactivate
    done
}

function kill_vscode_server() {
    # Kill server processes
    # kill -9 $(ps aux | \grep vscode-server | \grep "${USER"} | \grep -v grep | awk '{print $2}')
    kill -9 $(ps aux | \grep vscode-server | \grep -v grep | awk '{print $2}')
    # Delete related files and folder
    rm -rf $HOME/.vscode-server # Or ~/.vscode-server-insiders
}

function restart_pipewire() {
    # Sometimes my audio gets scratchy, and has weird echos and reverb. Seems to happen after wake
    # from sleep. This fixes it without having to reboot.
    systemctl --user restart pipewire.service
    systemctl --user restart pipewire-pulse.service
}

function restart_network() {
    # Restart just brings the interface down and then up.
    NIC_ID=enp85s0
    sudo ip link set down "${NIC_ID}"
    sudo ip link set up "${NIC_ID}"
}

function reset_network() {
    # Restart is more comprehensive; includes reloading the network driver, flushing IP addresses,
    # and routes and resetting the hardware itself.
    # * (Identify the nic id by running `ifconfig -a`):
    NIC_ID=enp85s0
    # * Reload the network driver (identify the driver name by running `lshw -C network | grep driver`):
    sudo modprobe -f atlantic
    sudo modprobe atlantic
    # * Restart networking service
    sudo systemctl restart systemd-networkd

}

# function mount_cifs_example() {
#     # Put a customized copy of this function into the local machine-specific .zprofiles:
#     SHARE_NAME="SHARE_NAME"
#     SHARE_USERNAME="SHARE_USERNAME"
#     sudo mkdir -p "/mnt/shares/${SHARE_NAME}/tank/pictures"

#     sudo mount -t cifs "//${SHARENAME}/pictures" \
#         "/mnt/shares/${SHARE_NAME}/tank/pictures" \
#         -o "username=${SHARE_USERNAME},password=PASSWORD,uid=1000"

# }

# function test_cifs_speed() {
#     # * Put a customized copy of this function into the local machine-specific .zprofiles:

#     # * Path to the cifs mount point:
#     SHARED_PATH="/mnt/shares/${SHARE_NAME}/tank/pictures"

#     # * Test writing:
#     echo "Testing write speed"
#     dd if=/dev/zero of="${SHARED_PATH}/testfile.bin" bs=2M count=1024

#     # * Test reading:
#     echo "Testing read speed"
#     dd if="${SHARED_PATH}/testfile.bin" of=/dev/null bs=2M count=1024

#     rm "${SHARED_PATH}/testfile.bin"
# }
